// <auto-generated />
using InvoicingService.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoicingService.Migrations
{
    [DbContext(typeof(InvoicingDbContext))]
    partial class InvoicingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InvoicingService.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CompanyContact");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CompanyUrl");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Company ABC"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Company DEF"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Company XYZ"
                        });
                });

            modelBuilder.Entity("InvoicingService.Domain.CompanyProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("000000")
                        .HasColumnName("ClientSecret");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProviderId");

                    b.ToTable("CompanyProviders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            IsActive = true,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            IsActive = true,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            IsActive = true,
                            ProviderId = 1
                        });
                });

            modelBuilder.Entity("InvoicingService.Domain.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ProviderCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ProviderCode");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ProviderName");

                    b.HasKey("Id");

                    b.ToTable("Providers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProviderCode = "XERO",
                            ProviderName = "Xero"
                        });
                });

            modelBuilder.Entity("InvoicingService.Domain.CompanyProvider", b =>
                {
                    b.HasOne("InvoicingService.Domain.Company", "Company")
                        .WithMany("CompanyProvider")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoicingService.Domain.Provider", "Provider")
                        .WithMany("CompanyProvider")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("InvoicingService.Domain.Company", b =>
                {
                    b.Navigation("CompanyProvider");
                });

            modelBuilder.Entity("InvoicingService.Domain.Provider", b =>
                {
                    b.Navigation("CompanyProvider");
                });
#pragma warning restore 612, 618
        }
    }
}
